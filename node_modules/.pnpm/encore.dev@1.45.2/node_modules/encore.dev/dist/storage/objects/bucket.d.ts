/// <reference types="node" />
import * as runtime from "../../internal/runtime/mod.js";
import { StringLiteral } from "../../internal/utils/constraints.js";
import { BucketPerms, Uploader, Downloader, Attrser, Lister, Remover, PublicUrler } from "./refs.js";
export interface BucketConfig {
    /**
     * Whether the objects in the bucket should be publicly
     * accessible, via CDN. Defaults to false if unset.
    */
    public?: boolean;
    /**
     * Whether to enable versioning of the objects in the bucket.
     * Defaults to false if unset.
     */
    versioned?: boolean;
}
/**
 * Defines a new Object Storage bucket infrastructure resource.
 */
export declare class Bucket extends BucketPerms implements Uploader, Downloader, Attrser, Lister, Remover, PublicUrler {
    impl: runtime.Bucket;
    /**
     * Creates a new bucket with the given name and configuration
     */
    constructor(name: string, cfg?: BucketConfig);
    /**
     * Reference an existing bucket by name.
     * To create a new storage bucket, use `new StorageBucket(...)` instead.
     */
    static named<name extends string>(name: StringLiteral<name>): Bucket;
    list(options: ListOptions): AsyncGenerator<ListEntry>;
    /**
     * Returns whether the object exists in the bucket.
     * Throws an error on network failure.
     */
    exists(name: string, options?: ExistsOptions): Promise<boolean>;
    /**
     * Returns the object's attributes.
     * Throws an error if the object does not exist.
     */
    attrs(name: string, options?: AttrsOptions): Promise<ObjectAttrs>;
    /**
     * Uploads an object to the bucket.
     */
    upload(name: string, data: Buffer, options?: UploadOptions): Promise<ObjectAttrs>;
    /**
     * Downloads an object from the bucket and returns its contents.
     */
    download(name: string, options?: DownloadOptions): Promise<Buffer>;
    /**
     * Removes an object from the bucket.
     * Throws an error on network failure.
     */
    remove(name: string, options?: DeleteOptions): Promise<void>;
    /**
    * Returns the public URL for accessing the object with the given name.
    * Throws an error if the bucket is not public.
    */
    publicUrl(name: string): string;
    ref<P extends BucketPerms>(): P;
}
export interface ListOptions {
    /**
     * Only include objects with this prefix in the listing.
     * If unset, all objects are included.
    */
    prefix?: string;
    /** Maximum number of objects to return. Defaults to no limit. */
    limit?: number;
}
export interface AttrsOptions {
    /**
     * The object version to retrieve attributes for.
     * Defaults to the lastest version if unset.
     *
     * If bucket versioning is not enabled, this option is ignored.
     */
    version?: string;
}
export interface ExistsOptions {
    /**
     * The object version to check for existence.
     * Defaults to the lastest version if unset.
     *
     * If bucket versioning is not enabled, this option is ignored.
     */
    version?: string;
}
export interface DeleteOptions {
    /**
     * The object version to delete.
     * Defaults to the lastest version if unset.
     *
     * If bucket versioning is not enabled, this option is ignored.
     */
    version?: string;
}
export interface DownloadOptions {
    /**
     * The object version to download.
     * Defaults to the lastest version if unset.
     *
     * If bucket versioning is not enabled, this option is ignored.
     */
    version?: string;
}
export interface ObjectAttrs {
    name: string;
    size: number;
    /** The version of the object, if bucket versioning is enabled. */
    version?: string;
    etag: string;
    contentType?: string;
}
export interface ListEntry {
    name: string;
    size: number;
    etag: string;
}
export interface UploadOptions {
    contentType?: string;
    preconditions?: {
        notExists?: boolean;
    };
}
